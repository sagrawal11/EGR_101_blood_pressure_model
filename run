#include <LiquidCrystal.h>
#include <FastLED.h>

// Define the LCD, LED, and button pins
#define LED_PIN     6
#define NUM_LEDS    30
#define BRIGHTNESS  64
#define LED_TYPE    WS2811
#define COLOR_ORDER GRB
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// Pressure sensor configuration (define upper and lower)
#define PRESSURE_SENSOR_PIN A0
#define PRESSURE_THRESHOLD 692
#define LOWER_PRESSURE_THRESHOLD 622

// Button pins
#define NORMAL_BUTTON_PIN 7
#define DIABETES_BUTTON_PIN 8
#define HEART_BUTTON_PIN 9

// LED and flow control
CRGB leds[NUM_LEDS];
bool ledsFlowing = false;
unsigned long lastFlowUpdate = 0;
int currentLED = 0;
int lastLEDState[NUM_LEDS];

// Tracking pressure, systolic, diastolic, etc.
bool isPressureHigh = false;
bool pressureReleased = false;
bool simulationRunning = false;
bool systolicShown = false;
bool diastolicShown = false;
bool simulationComplete = false;
bool isHeartDisease = false;
bool finalFlowStarted = false;

// Timing variables for delays
unsigned long pressureReleaseTime = 0;
unsigned long systolicDisplayTime = 1000;
unsigned long diastolicDisplayTime = 0;
unsigned long diastolicClearTime = 5000;
unsigned long finalFlowTime = 5000;

// Base blood pressure reading values
const int BASE_NORMAL_SYSTOLIC = 120;
const int BASE_NORMAL_DIASTOLIC = 80;
const int BASE_DIABETES_SYSTOLIC = 135;
const int BASE_DIABETES_DIASTOLIC = 85;
const int BASE_HEART_SYSTOLIC = 140;
const int BASE_HEART_DIASTOLIC = 90;

// Current blood pressure readings 
int systolicReading;
int diastolicReading;

// Speed settings
unsigned long normalFlowSpeed = 200;
unsigned long diabetesFlowSpeed = 100;
unsigned long heartFlowSpeed = 75;
unsigned long currentBaseSpeed;
unsigned long flowSpeed;

// Function to add random variation
int addRandomVariation(int baseValue) {
 return baseValue + random(-2, 3); // random(-2, 3) gives values from -2 to +2 to randomize the values
}

void updateLEDFlow();
void displayDiastolic();
void turnOffLEDs();
void setReadings(int systolic, int diastolic);
void startSimulation();
void applyPressure();
void releasePressure();
void displaySystolic();
void resetSimulation();

void setup() {
 pinMode(NORMAL_BUTTON_PIN, INPUT);
 pinMode(DIABETES_BUTTON_PIN, INPUT);
 pinMode(HEART_BUTTON_PIN, INPUT);

 lcd.begin(16, 2);
 Serial.begin(9600);
 randomSeed(analogRead(A1)); 
 
 FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
 FastLED.setBrightness(BRIGHTNESS);

 lcd.clear();
 lcd.print("Select Button"); //first display on the LCS
 lcd.setCursor(0, 1);
 lcd.print("to Start!"); //part of first display
 
 FastLED.clear(); //clears when a button is pressed
 FastLED.show();
}

void loop() {
 if (ledsFlowing) {
   updateLEDFlow();
 }

 int pressure = analogRead(PRESSURE_SENSOR_PIN);

 // Button handling
 if (!simulationRunning && !simulationComplete) {
   if (digitalRead(NORMAL_BUTTON_PIN) == HIGH) {
     setReadings(BASE_NORMAL_SYSTOLIC, BASE_NORMAL_DIASTOLIC);
     currentBaseSpeed = normalFlowSpeed;
     flowSpeed = currentBaseSpeed;
     isHeartDisease = false;
     startSimulation();
   }
   if (digitalRead(DIABETES_BUTTON_PIN) == HIGH) {
     setReadings(BASE_DIABETES_SYSTOLIC, BASE_DIABETES_DIASTOLIC);
     currentBaseSpeed = diabetesFlowSpeed;
     flowSpeed = currentBaseSpeed;
     isHeartDisease = false;
     startSimulation();
   }
   if (digitalRead(HEART_BUTTON_PIN) == HIGH) {
     setReadings(BASE_HEART_SYSTOLIC, BASE_HEART_DIASTOLIC);
     currentBaseSpeed = heartFlowSpeed;
     flowSpeed = currentBaseSpeed;
     isHeartDisease = true;
     startSimulation();
   }
 }

 // If pressure is greater than threshold, stop LEDs
 if (pressure >= PRESSURE_THRESHOLD && !isPressureHigh && simulationRunning) {
   applyPressure();
 }
 //If pressure less than lower threshold, start LEDs gradually
 if (pressure < PRESSURE_THRESHOLD && !pressure < LOWER_PRESSURE_THRESHOLD && isPressureHigh && simulationRunning) {
   ledsFlowing = false;
 }

 if (pressure < LOWER_PRESSURE_THRESHOLD && isPressureHigh && simulationRunning) {
   releasePressure();
 }

 // Display readings on the LCD screen
 if (pressureReleased && millis() - pressureReleaseTime >= systolicDisplayTime && !systolicShown) {
   displaySystolic();
 }

 if (pressureReleased && flowSpeed == currentBaseSpeed && !diastolicShown) {
   displayDiastolic();
 }

 // Handle diastolic values, clear the LCD, and allow flow for some time after diastolic is displayed
 if (diastolicShown) {
   unsigned long timeElapsed = millis() - diastolicDisplayTime;
   
   if (timeElapsed >= diastolicClearTime && !finalFlowStarted) {
     lcd.clear();
     finalFlowStarted = true;
     ledsFlowing = true;
   }
   
   if (finalFlowStarted && timeElapsed >= (diastolicClearTime + finalFlowTime)) {
     turnOffLEDs();
   }
 }

 // Reset simulation
 if (simulationComplete && (digitalRead(NORMAL_BUTTON_PIN) == HIGH || 
     digitalRead(DIABETES_BUTTON_PIN) == HIGH || 
     digitalRead(HEART_BUTTON_PIN) == HIGH)) {
   resetSimulation();
 }
}

void updateLEDFlow() {
 if (pressureReleased && flowSpeed > currentBaseSpeed) {
   unsigned long elapsed = millis() - pressureReleaseTime;
   unsigned long transitionDuration = 9000;
   float progress = min(1.0, (float)elapsed / transitionDuration);
   flowSpeed = currentBaseSpeed * 3 - progress * (currentBaseSpeed * 2);
 }

 if (millis() - lastFlowUpdate >= flowSpeed) {
   for (int i = 0; i < NUM_LEDS; i++) {
     lastLEDState[i] = leds[i].r;
   }

   FastLED.clear();
   
   if (isHeartDisease) {
     int middleLED = NUM_LEDS / 2;
     leds[middleLED] = CRGB::Yellow;
     
     if (currentLED < middleLED - 2) {
       leds[currentLED] = CRGB::Red;
       leds[currentLED + 1] = CRGB::Red;
       leds[currentLED + 2] = CRGB::Red;
     }
     
     currentLED = (currentLED + 1) % (middleLED - 2);
   } else {
     leds[currentLED] = CRGB::Red;
     leds[(currentLED + 1) % NUM_LEDS] = CRGB::Red;
     leds[(currentLED + 2) % NUM_LEDS] = CRGB::Red;
     currentLED = (currentLED + 1) % NUM_LEDS;
   }
   
   FastLED.show();
   lastFlowUpdate = millis();
 }
}

void setReadings(int baseSystolic, int baseDiastolic) {
 // Add random variation when settings readings
 systolicReading = addRandomVariation(baseSystolic);
 diastolicReading = addRandomVariation(baseDiastolic);
}

void startSimulation() {
 lcd.clear();
 lcd.print("Pump pressure");
 lcd.setCursor(0, 1);
 lcd.print("cuff");
 ledsFlowing = true;
 simulationRunning = true;
 systolicShown = false;
 diastolicShown = false;
 finalFlowStarted = false;
}

void displayDiastolic() {
 lcd.clear();
 lcd.print("Diastolic:");
 lcd.setCursor(0, 1);
 lcd.print(diastolicReading);
 diastolicShown = true;
 diastolicDisplayTime = millis();
 
 flowSpeed = currentBaseSpeed;
 simulationComplete = true;
 simulationRunning = false;
}

void turnOffLEDs() {
 FastLED.clear();
 FastLED.show();
 ledsFlowing = false;
}

void applyPressure() {
 isPressureHigh = true;
 ledsFlowing = false;
 lcd.clear();
 lcd.print("Release valve");
 lcd.setCursor(0, 1);
 lcd.print("slowly");
}

void releasePressure() {
 isPressureHigh = false;
 pressureReleaseTime = millis();
 pressureReleased = true;
 ledsFlowing = true;
 flowSpeed = currentBaseSpeed * 3;
}

void displaySystolic() {
 lcd.clear();
 lcd.print("Systolic:");
 lcd.setCursor(0, 1);
 lcd.print(systolicReading);
 systolicShown = true;
}

void resetSimulation() {
 lcd.clear();
 lcd.print("Select Button");
 lcd.setCursor(0, 1);
 lcd.print("to Start!");
 
 ledsFlowing = false;
 FastLED.clear();
 FastLED.show();
 currentLED = 0;
 simulationComplete = false;
 simulationRunning = false;
 pressureReleased = false;
 systolicShown = false;
 diastolicShown = false;
 isHeartDisease = false;
 finalFlowStarted = false;
}
