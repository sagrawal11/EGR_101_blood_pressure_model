#include <LiquidCrystal.h>
#include <FastLED.h>

int buzzerPin = 13;
#define LED_PIN     6
#define NUM_LEDS    30
#define BRIGHTNESS  64
#define LED_TYPE    WS2811
#define COLOR_ORDER GRB
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

#define NOTE_C4 262

int systolicBase = 120;
int diastolicBase = 80;
int systolicReading = 0;
int diastolicReading = 0;

#define BUTTON_PIN_GREEN  7  
#define BUTTON_PIN_ORANGE 8  
#define BUTTON_PIN_YELLOW 9  

int pressureAnalogPin = 0;
int pressureReading;
int greenThreshold = 750;
int orangeThreshold = 800;
int yellowThreshold = 850;

CRGB leds[NUM_LEDS];
unsigned long startTime = 0;
bool isFlowing = false;
bool yellowPressed = false;
bool soundPlaying = false;
unsigned long flowSpeed = 100;

void setup() {
   pinMode(BUTTON_PIN_GREEN, INPUT);  
   pinMode(BUTTON_PIN_ORANGE, INPUT); 
   pinMode(BUTTON_PIN_YELLOW, INPUT); 
   pinMode(buzzerPin, OUTPUT);

   lcd.begin(16, 2);
   delay(500);

   Serial.begin(9600);
   delay(3000);

   FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
   FastLED.setBrightness(BRIGHTNESS);

   Serial.println("Setup complete.");
}

void loop() {
   pressureReading = analogRead(pressureAnalogPin);
   Serial.print("Pressure Pad Reading - ");
   Serial.println(pressureReading);

   int greenButtonState = digitalRead(BUTTON_PIN_GREEN);
   int orangeButtonState = digitalRead(BUTTON_PIN_ORANGE);
   int yellowButtonState = digitalRead(BUTTON_PIN_YELLOW);

   yellowPressed = false;  // Reset yellowPressed flag unless the yellow button condition is met

   if (pressureReading >= greenThreshold && greenButtonState == HIGH && !isFlowing) {
       systolicReading = systolicBase + random(-5, 6);
       diastolicReading = diastolicBase + random(-5, 6);

       Serial.print("Systolic: ");
       Serial.println(systolicReading);
       Serial.print("Diastolic: ");
       Serial.println(diastolicReading);

       startFlowWithSound(10000, 18, 100, systolicReading, "Systolic:");
   }

   if (pressureReading >= orangeThreshold && orangeButtonState == HIGH && !isFlowing) {
       startFlowWithSound(5000, 18, 150, 0, "");
   }

   if (pressureReading >= yellowThreshold && yellowButtonState == HIGH && !isFlowing) {
       yellowPressed = true;  // Set yellowPressed only if yellow button is pressed with the threshold
       startFlowWithSound(10000, 20, 200, 0, "");
   }

   if (isFlowing && millis() - startTime >= 10000) {
       resetFlow();
   } else if (pressureReading < greenThreshold) {
       FastLED.clear();
       FastLED.show();
   }

   delay(100);
}

void startFlowWithSound(unsigned long duration, int maxLEDIndex, unsigned long speed, int reading, String label) {
   startTime = millis();
   isFlowing = true;
   soundPlaying = true;
   flowSpeed = speed;

   if (reading > 0) {
       lcd.clear();
       delay(50);
       lcd.setCursor(0, 0);
       lcd.print(label);
       lcd.setCursor(0, 1);
       lcd.print(reading);
       delay(1000);
   }

   tone(buzzerPin, NOTE_C4);
   runFlow(duration, maxLEDIndex);
}

void resetFlow() {
   isFlowing = false;
   soundPlaying = false;
   noTone(buzzerPin);
   FastLED.clear();
   FastLED.show();

   lcd.clear();
   delay(50);
   lcd.setCursor(0, 0);
   lcd.print("Diastolic:");
   lcd.setCursor(0, 1);
   lcd.print(diastolicReading);
   delay(1000);
}

void runFlow(unsigned long duration, int maxLEDIndex) {
   unsigned long flowStart = millis();
   int currentLED = 0;

   while (millis() - flowStart < duration) {
       FastLED.clear();

       int ledIndex1 = currentLED % (maxLEDIndex + 1);
       int ledIndex2 = (currentLED + 1) % (maxLEDIndex + 1);
       int ledIndex3 = (currentLED + 2) % (maxLEDIndex + 1);

       leds[ledIndex1] = CRGB::Red;
       leds[ledIndex2] = CRGB::Red;
       leds[ledIndex3] = CRGB::Red;

       if (yellowPressed) {
           leds[21] = CRGB::Yellow;
       } else {
           leds[21] = CRGB::Black;
       }

       FastLED.show();
       FastLED.delay(flowSpeed);

       currentLED++;
       if (currentLED > maxLEDIndex) {
           currentLED = 0;
       }
   }
}
